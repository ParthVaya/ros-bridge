# DWAPlannerROS:
#   acc_lim_x:  0.75
#   acc_lim_y:  0.75
#   acc_lim_theta: 4.00
#   max_vel_x:  0.500
#   min_vel_x:  0.212
#   max_rotational_vel: 0.550
#   min_in_place_rotational_vel: 0.15
#   escape_vel: -0.10
#   holonomic_robot: false

#   xy_goal_tolerance:  0.20
#   yaw_goal_tolerance: 0.20

#   sim_time: 1.7
#   sim_granularity: 0.05
#   vx_samples: 3
#   vtheta_samples: 3
#   vtheta_samples: 20

#   goal_distance_bias: 0.8
#   path_distance_bias: 0.6
#   occdist_scale: 0.01
#   heading_lookahead: 0.325
#   dwa: true

#   oscillation_reset_dist: 0.05
#   meter_scoring: true
  
TebLocalPlannerROS:

 odom_topic: odom
 #map_frame: ego_vehicle
   
 # Trajectory
  
 teb_autosize: True # If set to true automatic resizing occurs
 dt_ref: 0.3 # Desired temporal resolution of the trajectory
 dt_hysteresis: 0.1 # Hysteresis for automatic resizing depending on the current temporal resolution, usually approx 10% of dt_ref is recommended
 global_plan_overwrite_orientation: True # Overwrite orientation of local subgoals provided by the global planner 
 max_global_plan_lookahead_dist: 7.4 # Specify the maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization
 allow_init_with_backwards_motion: False 
 feasibility_check_no_poses: 5 # Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval
 cmd_angle_instead_rotvel: false
    
 # Robot
         
 max_vel_x: 10
 max_vel_x_backwards: 0.0
 max_vel_theta: 1.3
 acc_lim_x: 1.5
 acc_lim_theta: 1.5
 min_turning_radius: 0.1
 wheelbase : 1.6
 footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
    type: "line"
    radius: 0.2 # for type "circular"
    line_start: [0.0, 0.0] # for type "line"
    line_end: [1.6, 0.0] # for type "line"
    front_offset: 0.2 # for type "two_circles"
    front_radius: 0.2 # for type "two_circles"
    rear_offset: 0.2 # for type "two_circles"
    rear_radius: 0.2 # for type "two_circles"
    vertices: [ [0.608, 0.443], [0.608, -0.443], [2.445, -0.608], [2.445, -0.608] ] # for type "polygon"

 # GoalTolerance
    
 xy_goal_tolerance: 0.5 # Maximum allowable deviation in robot position from the goal position.
 yaw_goal_tolerance: 0.4 # Specifies the maximum allowable angular deviation in the robot orientation from the goal orientation.
 free_goal_vel: False # when set to false removes the goal velocity constraint such that the robot can arrive at the goal with maximum velocity.
    
 # Obstacles
    
 min_obstacle_dist: 1.5
 include_costmap_obstacles: True # Specify if obstacles of the local costmap should be taken into account. 
 costmap_obstacles_behind_robot_dist: 0.1 # Limit the occupied local costmap obstacles taken into account for planning behind the robot
 obstacle_poses_affected: 30 # Each obstacle position is attached to the closest pose on the trajectory in order to keep a distance. Additional neighbors can be taken into account as well
 costmap_converter_plugin: "" #Define plugin name in order to convert costmap cells to points/lines/polygons. Set an empty string to disable the conversion such that all cells are treated as point-obstacles.
 costmap_converter_spin_thread: True # If set to true, the costmap converter invokes its callback queue in a different thread.
 costmap_converter_rate: 5 # Rate that defines how often the costmap_converter plugin processes the current costmap (the value should not be much higher than the costmap update rate) [in Hz]

 # Optimization
    
 no_inner_iterations: 3 # Number of actual solver iterations called in each outer loop iteration. See param no_outer_iterations.
 no_outer_iterations: 2 # Each outer loop iteration automatically resizes the trajectory according to the desired temporal resolution dt_ref and invokes the internal optimizer (that performs no_inner_iterations). The total number of solver iterations in each planning cycle is therefore the product of both values.
 optimization_activate: True # Set to true for activating optimization
 optimization_verbose: False # Print the optimization steps
 penalty_epsilon: 0.1 # Add a small safety margin to penalty functions for hard-constraint approximations
 weight_max_vel_x: 2 # Optimization weight for satisfying the maximum allowed translational velocity
 weight_max_vel_theta: 1 # Optimization weight for satisfying the maximum allowed angular velocity
 weight_acc_lim_x: 0.0 # Optimization weight for satisfying the maximum allowed translational acceleration
 weight_acc_lim_theta: 0.0 # Optimization weight for satisfying the maximum allowed angular acceleration
 weight_kinematics_nh: 999 # Optimization weight for satisfying the non-holonomic kinematics (this parameter must be high)
 weight_kinematics_forward_drive: 999 # Optimization weight for forcing the robot to choose only forward directions positive transl. velocities). A small weight (e.g. 1.0) still allows driving backwards.
 weight_kinematics_turning_radius: 1 # Optimization weight for enforcing a minimum turning radius (only for car like robots)
 weight_optimaltime: 1 # Optimization weight for contracting the trajectory w.r.t transition/execution time
 weight_obstacle: 50 # Optimization weight for keeping a minimum distance from obstacles
 weight_dynamic_obstacle: 10 # not in use yet
 alternative_time_cost: False # not in use yet

 # Homotopy Class Planner

 enable_homotopy_class_planning: False # Activate parallel planning in distinctive topologies (requires much more CPU resources)
 enable_multithreading: False # Activate multiple threading in order to plan each trajectory in a different thread
 simple_exploration: False # to use it for exploration set value to true
 max_number_classes: 4 # Specify the maximum number of distinctive trajectories taken into account (limits computational effort)
 roadmap_graph_no_samples: 5 # Specify the number of samples generated for creating the roadmap graph
 roadmap_graph_area_width: 5 # Random waypoints are sampled in a rectangular region between start and goal. Specify the width of that region in meters.
 h_signature_prescaler: 0.5 # Scale internal parameter (H-signature) that is used to distinguish between homotopy classes. Warning: reduce this parameter only, if you observe problems with too many obstacles in the local cost map, do not choose it extremely low, otherwise obstacles cannot be distinguished from each other (0.2<value<=1).
 h_signature_threshold: 0.1 # Two H-signatures are assumed to be equal, if both the difference of real parts and complex parts are below the specified threshold.
 obstacle_keypoint_offset: 0.1 #
 obstacle_heading_threshold: 0.45 # Specify the value of the scalar product between obstacle heading and goal heading in order to take them (obstacles) into account for exploration.
 visualize_hc_graph: False # Visualize the graph that is created for exploring distinctive trajectories.
